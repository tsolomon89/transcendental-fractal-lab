import React from 'react';

const Help: React.FC = () => {
    return (
        <details className="mt-6 text-sm text-gray-400">
            <summary className="cursor-pointer font-semibold text-gray-300 hover:text-cyan-400">
                Help & Math Notes
            </summary>
            <div className="mt-2 p-3 bg-gray-900 rounded-lg border border-gray-700 space-y-4">
                <p>Press <kbd className="inline-flex items-center justify-center px-1 py-0.5 text-xs font-semibold text-gray-200 bg-gray-700 border border-gray-600 rounded-md shadow-sm">?</kbd> to view all <strong>Keyboard & Mouse Controls</strong>.</p>
                
                <h4 className="font-bold text-gray-200">Core Concepts: Mandelbrot vs. Julia</h4>
                <p>Fractals are generated by repeating a mathematical process. For a point in the complex plane, we generate a sequence of numbers called an <strong>orbit</strong>: z₀, z₁, z₂, ... where zₙ₊₁ = f(zₙ, c). We then check if this orbit flies off to infinity or stays contained.</p>
                <ul className="list-disc list-inside space-y-1 pl-2">
                    <li><strong>Mandelbrot Mode:</strong> This mode is a "map" of different fractals. Here, the parameter <strong>`c` is the coordinate of each pixel</strong> on the screen. The iteration always starts from a fixed point, z₀ = 0. The color of each pixel is determined by how quickly the orbit escapes.</li>
                    <li><strong>Julia Mode:</strong> This mode explores a single fractal from that map. Here, the parameter <strong>`c` is a fixed constant</strong> that you define in the "Model" controls (as "Julia C"). The <strong>starting point z₀ is the coordinate of each pixel</strong>. This reveals the intricate structure associated with that specific `c` value.</li>
                </ul>

                <h4 className="font-bold text-gray-200">Orbit Visualization</h4>
                <p>Enable "Show Orbit" to see the iteration path (z₀, z₁, z₂, ...) for the point under your cursor. This directly visualizes the concepts above:</p>
                <ul className="list-disc list-inside space-y-1 pl-2">
                    <li>In <strong>Mandelbrot</strong> mode, it shows the orbit for z₀=0 using the cursor's coordinate as `c`.</li>
                    <li>In <strong>Julia</strong> mode, it shows the orbit using the cursor's coordinate as z₀ and the fixed "Julia C" parameter.</li>
                </ul>
                
                <h4 className="font-bold text-gray-200">Model Explanations</h4>
                <p>The following formulas define the iteration step, f(z, c). All models incorporate a <strong className="text-cyan-400">τ Power (k)</strong> parameter, where τ = 2π. Setting k=0 often recovers classic formulas.</p>
                <p><strong>A0: <span className="font-mono">f(z) = z²τᵏ + c</span></strong><br />A generalization of the classic z²+c function.</p>
                <p><strong>A2: <span className="font-mono">f(z) = z² + cτᵏ</span></strong><br />Scales the parameter `c` by τᵏ. Affects Julia sets more than Mandelbrot sets.</p>
                <p><strong>Aτ: <span className="font-mono">f(z) = (z² + c)/τᵏ</span></strong><br />This model is "affinely conjugate" to A0. Its dynamics are identical, just rescaled.</p>
                <p><strong>B1/B2: Transcendental Forcing</strong><br />Models like <span className="font-mono">f(z) = z² + c + λ·sin(τᵏz)</span> add a non-algebraic "forcing" term. The τᵏ here is essential and creates fundamentally new and complex structures not seen in the simpler models.</p>

                <h4 className="font-bold text-gray-200">Technical Details</h4>
                <p><strong>Smooth Coloring:</strong> To avoid distinct color bands, we use a formula that gives a fractional iteration count: <span className="font-mono">ν = n + 1 - log(log|z|) / log(2)</span>. This continuous value results in smoother gradients.</p>
                 <p><strong>Escape Radius:</strong> This is the radius of the "bailout circle". If |z| exceeds this value, we assume the orbit escapes to infinity. For the classic z²+c, a radius of 2 is sufficient. For these generalized models, a larger radius (the default is 4) is safer to ensure no bounded points are misidentified as escaping.</p>
            </div>
        </details>
    );
};

export default Help;
